package cz.muni;

import com.google.testing.compile.Compilation;
import com.google.testing.compile.JavaFileObjects;
import cz.muni.fi.processor.LogInvocationProcessor;
import org.junit.Test;

import static com.google.testing.compile.CompilationSubject.assertThat;
import static com.google.testing.compile.Compiler.javac;

public class LogInvocationProcessorCompilationTest {

    @Test
    public void shouldNotCompileInsufficientParametrization() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("InsufficientParametrization.java"));

        assertThat(compilation).hadErrorContaining(
                "literal Should not compile {} contains 1 variables, but statement defaultLog.info(\"Should not compile {}\").varDouble(1.2).varBoolean(false).log(); uses 2 variables [InsufficientParametrization:16]"
        );
    }

    @Test
    public void shouldNotCompileLogMethodNotCalled() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("LogMethodNotCalled.java"));

        assertThat(compilation).hadErrorContaining(
                "statement defaultLog.info(\"Should not compile {} {}\").varDouble(1.2).varBoolean(false); must be ended by calling log() method [LogMethodNotCalled:16]"
        );
    }

    @Test
    public void shouldNotCompileInvalidQualifiedEventNameJavaKeyword() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("InvalidQualifiedEventNameJavaKeyword.java"));

        assertThat(compilation).hadErrorContaining(
                "qualified event name some.package.ShouldNotBeCreated generated by statement defaultLog.info(\"Should not compile {} {}\").varDouble(1.2).varBoolean(false).log(\"some.package.ShouldNotBeCreated\"); is not valid, please check specified event name and package does not contain java keyword or no subpackage or class name starts with number [InvalidQualifiedEventNameJavaKeyword:16]"
        );
    }

    @Test
    public void shouldNotCompileInvalidQualifiedEventNameStartWithNumber() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("InvalidQualifiedEventNameStartWithNumber.java"));

        assertThat(compilation).hadErrorContaining(
                "qualified event name some.different.1ShouldNotBeCreated generated by statement defaultLog.info(\"Should not compile {} {}\").varDouble(1.2).varBoolean(false).log(\"some.different.1ShouldNotBeCreated\"); is not valid, please check specified event name and package does not contain java keyword or no subpackage or class name starts with number [InvalidQualifiedEventNameStartWithNumber:16]"
        );
    }

    @Test
    public void shouldNotCompileInvalidQualifiedEventNameInvalidChar() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("InvalidQualifiedEventNameInvalidChar.java"));

        assertThat(compilation).hadErrorContaining(
                "qualified event name some.different.\"ShouldNotBeCreated specified by defaultLog.info(\"Should not compile {} {}\").varDouble(1.2).varBoolean(false).log(\"some.different.\\\"ShouldNotBeCreated\"); statement is not valid [InvalidQualifiedEventNameInvalidChar:16]"
        );
    }

    @Test
    public void shouldNotCompileEventStructureCollision() {
        final Compilation compilation =
                javac()
                        .withProcessors(new LogInvocationProcessor())
                        .compile(JavaFileObjects.forResource("EventStructureCollision.java"));

        assertThat(compilation).hadErrorContaining(
                "Statement defaultLog.info(\"Should not compile {} {}\").varInt(1.2).varBoolean(false).log(\"CollisionEvent\"); generates different event structure for same event name [EventStructureCollision:21]"
        );
    }
}
